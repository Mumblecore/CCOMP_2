#include <iostream>
#include <conio.h>
#include <stdlib.h>
#include <time.h>

using namespace std;

/*======================FUNCION PARA MOSTRAR EL ARRAY EN CONSOLA========================*/
void print(int arr[][4])
{
    system("cls");

    for(int (*p)[4] = arr; p < arr + 4; p++)
    {
        cout << "|";
        for(int *q = *p; q < *p + 4; q++)
        {
            if(*q<10)
            {
                cout << " ";
            }
            if(*q)
            {
                cout << *q << "|";
            }else
            {
                cout << " |";
            }
        }
        cout << endl;
    }
}
/*=================================CONDICION PARA GANAR=================================*/
bool ordenado(int arr[][4])
{
    for(int *p = *arr; p != *arr + 14; p++)
    {
        if(*p>*(p+1))
        {
            return false;
        }
    }
    return true;
}
/*==============================FUNCIONES DE MOVIMIENTO=================================*/
void mov_hor(int arr[4][4], bool dir, int *pos)
{
    if(dir)
    {
        if(*pos<3)
        {
            swap(*(*(arr + *(pos+1)) + *pos),*(*(arr + *(pos+1)) + *pos + 1));
            *pos = *pos + 1;
        }
    }
    else
    {
        if(*pos>0)
        {
            swap(*(*(arr + *(pos+1)) + *pos),*(*(arr + *(pos+1)) + *pos - 1));
            *pos = *pos - 1;
        }
    }
}

void mov_ver(int arr[4][4], bool dir, int *pos)
{
    if(dir)
    {
        if(*(pos+1)>0)
        {
            swap(*(*(arr + *(pos+1)) + *pos),*(*(arr + *(pos+1) - 1) + *pos));
            *(pos+1) = *(pos+1) - 1;
        }
    }
    else
    {
        if(*(pos+1)<3)
        {
            swap(*(*(arr + *(pos+1)) + *pos),*(*(arr + *(pos+1) + 1) + *pos));
            *(pos+1) = *(pos+1) + 1;
        }
    }
}
/*================================DESORDENAMIENTO====================================*/

void desordenar(int tab[][4], int *pos)
{
    //desordena el array
    srand(time(NULL));
    for(int i = 15; i > 0; i--)
    {
        int j = rand() % (i+1);
        swap(tab[0][i],tab[0][j]);
    }
    //busca el cero
    for(int i = 15; i > 0; i--)
    {
        int j = rand() % (i+1);
    }

/*======================================MAIN=========================================*/
int main()
{
    cout << "+==========================+\n";
    cout << "|         15-PUZZLE        |\n";
    cout << "+==========================+\n\n";

    cout << "Movimiento con las flechas\n\n";

    cout << "PRESIONE ESPACIO PARA JUGAR.\n";
    cout << "PRESIONE ESCAPE PARA SALIR.\n";

    bool juego = 0;
    int n = getch();

    if(n == 27)
    {
        return 0;
    }
    else if(n == 32)
    {
        juego = 1;
    }

    int puzzle[4][4] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0};
    int pos[2] = {3,3};     //array que almacena la posicion del pivote (x,y)

    desordenar(puzzle,pos);
/*=================================BUCLE PRINCIPAL===================================*/
    while(juego)
    {
        print(puzzle);
        if(ordenado(puzzle)) //comprobar si ya se gano
        {
            cout << "\n";
            cout << "+==========================+\n";
            cout << "|   FELICIDADES, GANO!!!   |\n";
            cout << "+==========================+\n";
            juego = 0;
            cout << "Desea Jugar otra vez? s/n ";
            int rpta = getch();
            if(rpta == 115){
                juego = 1;
                //desordenar(puzzle,pos);
            }
        }
        else //sino, se juega
        {
            switch (getch())
            {
            case 72:
                mov_ver(puzzle,1,pos);
                break;

            case 75:
                mov_hor(puzzle,0,pos);
                break;

            case 80:
                mov_ver(puzzle,0,pos);
                break;

            case 77:
                mov_hor(puzzle,1,pos);
                break;

            case 27:
                return 0;
                break;

            default:
                break;
            }
        }
    }

    return 0;
}
